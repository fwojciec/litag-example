// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/litag-example/generated/sqlc"
	"github.com/fwojciec/litag-example/postgres"
	"sync"
)

var (
	lockQMockCreateAgent          sync.RWMutex
	lockQMockCreateAuthor         sync.RWMutex
	lockQMockDeleteAgent          sync.RWMutex
	lockQMockDeleteAuthor         sync.RWMutex
	lockQMockDeleteBook           sync.RWMutex
	lockQMockGetAgent             sync.RWMutex
	lockQMockGetAuthor            sync.RWMutex
	lockQMockGetBook              sync.RWMutex
	lockQMockListAgents           sync.RWMutex
	lockQMockListAuthors          sync.RWMutex
	lockQMockListAuthorsByAgentID sync.RWMutex
	lockQMockListAuthorsByBookID  sync.RWMutex
	lockQMockListBooks            sync.RWMutex
	lockQMockListBooksByAuthorID  sync.RWMutex
	lockQMockUpdateAgent          sync.RWMutex
	lockQMockUpdateAuthor         sync.RWMutex
)

// Ensure, that QMock does implement postgres.Q.
// If this is not the case, regenerate this file with moq.
var _ postgres.Q = &QMock{}

// QMock is a mock implementation of postgres.Q.
//
//     func TestSomethingThatUsesQ(t *testing.T) {
//
//         // make and configure a mocked postgres.Q
//         mockedQ := &QMock{
//             CreateAgentFunc: func(ctx context.Context, args sqlc.CreateAgentParams) (sqlc.Agent, error) {
// 	               panic("mock out the CreateAgent method")
//             },
//             CreateAuthorFunc: func(ctx context.Context, args sqlc.CreateAuthorParams) (sqlc.Author, error) {
// 	               panic("mock out the CreateAuthor method")
//             },
//             DeleteAgentFunc: func(ctx context.Context, id int64) (sqlc.Agent, error) {
// 	               panic("mock out the DeleteAgent method")
//             },
//             DeleteAuthorFunc: func(ctx context.Context, id int64) (sqlc.Author, error) {
// 	               panic("mock out the DeleteAuthor method")
//             },
//             DeleteBookFunc: func(ctx context.Context, id int64) (sqlc.Book, error) {
// 	               panic("mock out the DeleteBook method")
//             },
//             GetAgentFunc: func(ctx context.Context, id int64) (sqlc.Agent, error) {
// 	               panic("mock out the GetAgent method")
//             },
//             GetAuthorFunc: func(ctx context.Context, id int64) (sqlc.Author, error) {
// 	               panic("mock out the GetAuthor method")
//             },
//             GetBookFunc: func(ctx context.Context, id int64) (sqlc.Book, error) {
// 	               panic("mock out the GetBook method")
//             },
//             ListAgentsFunc: func(ctx context.Context) ([]sqlc.Agent, error) {
// 	               panic("mock out the ListAgents method")
//             },
//             ListAuthorsFunc: func(ctx context.Context) ([]sqlc.Author, error) {
// 	               panic("mock out the ListAuthors method")
//             },
//             ListAuthorsByAgentIDFunc: func(ctx context.Context, agentID int64) ([]sqlc.Author, error) {
// 	               panic("mock out the ListAuthorsByAgentID method")
//             },
//             ListAuthorsByBookIDFunc: func(ctx context.Context, bookID int64) ([]sqlc.Author, error) {
// 	               panic("mock out the ListAuthorsByBookID method")
//             },
//             ListBooksFunc: func(ctx context.Context) ([]sqlc.Book, error) {
// 	               panic("mock out the ListBooks method")
//             },
//             ListBooksByAuthorIDFunc: func(ctx context.Context, authorID int64) ([]sqlc.Book, error) {
// 	               panic("mock out the ListBooksByAuthorID method")
//             },
//             UpdateAgentFunc: func(ctx context.Context, args sqlc.UpdateAgentParams) (sqlc.Agent, error) {
// 	               panic("mock out the UpdateAgent method")
//             },
//             UpdateAuthorFunc: func(ctx context.Context, args sqlc.UpdateAuthorParams) (sqlc.Author, error) {
// 	               panic("mock out the UpdateAuthor method")
//             },
//         }
//
//         // use mockedQ in code that requires postgres.Q
//         // and then make assertions.
//
//     }
type QMock struct {
	// CreateAgentFunc mocks the CreateAgent method.
	CreateAgentFunc func(ctx context.Context, args sqlc.CreateAgentParams) (sqlc.Agent, error)

	// CreateAuthorFunc mocks the CreateAuthor method.
	CreateAuthorFunc func(ctx context.Context, args sqlc.CreateAuthorParams) (sqlc.Author, error)

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(ctx context.Context, id int64) (sqlc.Agent, error)

	// DeleteAuthorFunc mocks the DeleteAuthor method.
	DeleteAuthorFunc func(ctx context.Context, id int64) (sqlc.Author, error)

	// DeleteBookFunc mocks the DeleteBook method.
	DeleteBookFunc func(ctx context.Context, id int64) (sqlc.Book, error)

	// GetAgentFunc mocks the GetAgent method.
	GetAgentFunc func(ctx context.Context, id int64) (sqlc.Agent, error)

	// GetAuthorFunc mocks the GetAuthor method.
	GetAuthorFunc func(ctx context.Context, id int64) (sqlc.Author, error)

	// GetBookFunc mocks the GetBook method.
	GetBookFunc func(ctx context.Context, id int64) (sqlc.Book, error)

	// ListAgentsFunc mocks the ListAgents method.
	ListAgentsFunc func(ctx context.Context) ([]sqlc.Agent, error)

	// ListAuthorsFunc mocks the ListAuthors method.
	ListAuthorsFunc func(ctx context.Context) ([]sqlc.Author, error)

	// ListAuthorsByAgentIDFunc mocks the ListAuthorsByAgentID method.
	ListAuthorsByAgentIDFunc func(ctx context.Context, agentID int64) ([]sqlc.Author, error)

	// ListAuthorsByBookIDFunc mocks the ListAuthorsByBookID method.
	ListAuthorsByBookIDFunc func(ctx context.Context, bookID int64) ([]sqlc.Author, error)

	// ListBooksFunc mocks the ListBooks method.
	ListBooksFunc func(ctx context.Context) ([]sqlc.Book, error)

	// ListBooksByAuthorIDFunc mocks the ListBooksByAuthorID method.
	ListBooksByAuthorIDFunc func(ctx context.Context, authorID int64) ([]sqlc.Book, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(ctx context.Context, args sqlc.UpdateAgentParams) (sqlc.Agent, error)

	// UpdateAuthorFunc mocks the UpdateAuthor method.
	UpdateAuthorFunc func(ctx context.Context, args sqlc.UpdateAuthorParams) (sqlc.Author, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAgent holds details about calls to the CreateAgent method.
		CreateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args sqlc.CreateAgentParams
		}
		// CreateAuthor holds details about calls to the CreateAuthor method.
		CreateAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args sqlc.CreateAuthorParams
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteAuthor holds details about calls to the DeleteAuthor method.
		DeleteAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteBook holds details about calls to the DeleteBook method.
		DeleteBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAgent holds details about calls to the GetAgent method.
		GetAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAuthor holds details about calls to the GetAuthor method.
		GetAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetBook holds details about calls to the GetBook method.
		GetBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// ListAgents holds details about calls to the ListAgents method.
		ListAgents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListAuthors holds details about calls to the ListAuthors method.
		ListAuthors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListAuthorsByAgentID holds details about calls to the ListAuthorsByAgentID method.
		ListAuthorsByAgentID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID int64
		}
		// ListAuthorsByBookID holds details about calls to the ListAuthorsByBookID method.
		ListAuthorsByBookID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BookID is the bookID argument value.
			BookID int64
		}
		// ListBooks holds details about calls to the ListBooks method.
		ListBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListBooksByAuthorID holds details about calls to the ListBooksByAuthorID method.
		ListBooksByAuthorID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AuthorID is the authorID argument value.
			AuthorID int64
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args sqlc.UpdateAgentParams
		}
		// UpdateAuthor holds details about calls to the UpdateAuthor method.
		UpdateAuthor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args sqlc.UpdateAuthorParams
		}
	}
}

// CreateAgent calls CreateAgentFunc.
func (mock *QMock) CreateAgent(ctx context.Context, args sqlc.CreateAgentParams) (sqlc.Agent, error) {
	if mock.CreateAgentFunc == nil {
		panic("QMock.CreateAgentFunc: method is nil but Q.CreateAgent was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args sqlc.CreateAgentParams
	}{
		Ctx:  ctx,
		Args: args,
	}
	lockQMockCreateAgent.Lock()
	mock.calls.CreateAgent = append(mock.calls.CreateAgent, callInfo)
	lockQMockCreateAgent.Unlock()
	return mock.CreateAgentFunc(ctx, args)
}

// CreateAgentCalls gets all the calls that were made to CreateAgent.
// Check the length with:
//     len(mockedQ.CreateAgentCalls())
func (mock *QMock) CreateAgentCalls() []struct {
	Ctx  context.Context
	Args sqlc.CreateAgentParams
} {
	var calls []struct {
		Ctx  context.Context
		Args sqlc.CreateAgentParams
	}
	lockQMockCreateAgent.RLock()
	calls = mock.calls.CreateAgent
	lockQMockCreateAgent.RUnlock()
	return calls
}

// CreateAuthor calls CreateAuthorFunc.
func (mock *QMock) CreateAuthor(ctx context.Context, args sqlc.CreateAuthorParams) (sqlc.Author, error) {
	if mock.CreateAuthorFunc == nil {
		panic("QMock.CreateAuthorFunc: method is nil but Q.CreateAuthor was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args sqlc.CreateAuthorParams
	}{
		Ctx:  ctx,
		Args: args,
	}
	lockQMockCreateAuthor.Lock()
	mock.calls.CreateAuthor = append(mock.calls.CreateAuthor, callInfo)
	lockQMockCreateAuthor.Unlock()
	return mock.CreateAuthorFunc(ctx, args)
}

// CreateAuthorCalls gets all the calls that were made to CreateAuthor.
// Check the length with:
//     len(mockedQ.CreateAuthorCalls())
func (mock *QMock) CreateAuthorCalls() []struct {
	Ctx  context.Context
	Args sqlc.CreateAuthorParams
} {
	var calls []struct {
		Ctx  context.Context
		Args sqlc.CreateAuthorParams
	}
	lockQMockCreateAuthor.RLock()
	calls = mock.calls.CreateAuthor
	lockQMockCreateAuthor.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *QMock) DeleteAgent(ctx context.Context, id int64) (sqlc.Agent, error) {
	if mock.DeleteAgentFunc == nil {
		panic("QMock.DeleteAgentFunc: method is nil but Q.DeleteAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	lockQMockDeleteAgent.Unlock()
	return mock.DeleteAgentFunc(ctx, id)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//     len(mockedQ.DeleteAgentCalls())
func (mock *QMock) DeleteAgentCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	lockQMockDeleteAgent.RUnlock()
	return calls
}

// DeleteAuthor calls DeleteAuthorFunc.
func (mock *QMock) DeleteAuthor(ctx context.Context, id int64) (sqlc.Author, error) {
	if mock.DeleteAuthorFunc == nil {
		panic("QMock.DeleteAuthorFunc: method is nil but Q.DeleteAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockDeleteAuthor.Lock()
	mock.calls.DeleteAuthor = append(mock.calls.DeleteAuthor, callInfo)
	lockQMockDeleteAuthor.Unlock()
	return mock.DeleteAuthorFunc(ctx, id)
}

// DeleteAuthorCalls gets all the calls that were made to DeleteAuthor.
// Check the length with:
//     len(mockedQ.DeleteAuthorCalls())
func (mock *QMock) DeleteAuthorCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockDeleteAuthor.RLock()
	calls = mock.calls.DeleteAuthor
	lockQMockDeleteAuthor.RUnlock()
	return calls
}

// DeleteBook calls DeleteBookFunc.
func (mock *QMock) DeleteBook(ctx context.Context, id int64) (sqlc.Book, error) {
	if mock.DeleteBookFunc == nil {
		panic("QMock.DeleteBookFunc: method is nil but Q.DeleteBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockDeleteBook.Lock()
	mock.calls.DeleteBook = append(mock.calls.DeleteBook, callInfo)
	lockQMockDeleteBook.Unlock()
	return mock.DeleteBookFunc(ctx, id)
}

// DeleteBookCalls gets all the calls that were made to DeleteBook.
// Check the length with:
//     len(mockedQ.DeleteBookCalls())
func (mock *QMock) DeleteBookCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockDeleteBook.RLock()
	calls = mock.calls.DeleteBook
	lockQMockDeleteBook.RUnlock()
	return calls
}

// GetAgent calls GetAgentFunc.
func (mock *QMock) GetAgent(ctx context.Context, id int64) (sqlc.Agent, error) {
	if mock.GetAgentFunc == nil {
		panic("QMock.GetAgentFunc: method is nil but Q.GetAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockGetAgent.Lock()
	mock.calls.GetAgent = append(mock.calls.GetAgent, callInfo)
	lockQMockGetAgent.Unlock()
	return mock.GetAgentFunc(ctx, id)
}

// GetAgentCalls gets all the calls that were made to GetAgent.
// Check the length with:
//     len(mockedQ.GetAgentCalls())
func (mock *QMock) GetAgentCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockGetAgent.RLock()
	calls = mock.calls.GetAgent
	lockQMockGetAgent.RUnlock()
	return calls
}

// GetAuthor calls GetAuthorFunc.
func (mock *QMock) GetAuthor(ctx context.Context, id int64) (sqlc.Author, error) {
	if mock.GetAuthorFunc == nil {
		panic("QMock.GetAuthorFunc: method is nil but Q.GetAuthor was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockGetAuthor.Lock()
	mock.calls.GetAuthor = append(mock.calls.GetAuthor, callInfo)
	lockQMockGetAuthor.Unlock()
	return mock.GetAuthorFunc(ctx, id)
}

// GetAuthorCalls gets all the calls that were made to GetAuthor.
// Check the length with:
//     len(mockedQ.GetAuthorCalls())
func (mock *QMock) GetAuthorCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockGetAuthor.RLock()
	calls = mock.calls.GetAuthor
	lockQMockGetAuthor.RUnlock()
	return calls
}

// GetBook calls GetBookFunc.
func (mock *QMock) GetBook(ctx context.Context, id int64) (sqlc.Book, error) {
	if mock.GetBookFunc == nil {
		panic("QMock.GetBookFunc: method is nil but Q.GetBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockQMockGetBook.Lock()
	mock.calls.GetBook = append(mock.calls.GetBook, callInfo)
	lockQMockGetBook.Unlock()
	return mock.GetBookFunc(ctx, id)
}

// GetBookCalls gets all the calls that were made to GetBook.
// Check the length with:
//     len(mockedQ.GetBookCalls())
func (mock *QMock) GetBookCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	lockQMockGetBook.RLock()
	calls = mock.calls.GetBook
	lockQMockGetBook.RUnlock()
	return calls
}

// ListAgents calls ListAgentsFunc.
func (mock *QMock) ListAgents(ctx context.Context) ([]sqlc.Agent, error) {
	if mock.ListAgentsFunc == nil {
		panic("QMock.ListAgentsFunc: method is nil but Q.ListAgents was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockQMockListAgents.Lock()
	mock.calls.ListAgents = append(mock.calls.ListAgents, callInfo)
	lockQMockListAgents.Unlock()
	return mock.ListAgentsFunc(ctx)
}

// ListAgentsCalls gets all the calls that were made to ListAgents.
// Check the length with:
//     len(mockedQ.ListAgentsCalls())
func (mock *QMock) ListAgentsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockQMockListAgents.RLock()
	calls = mock.calls.ListAgents
	lockQMockListAgents.RUnlock()
	return calls
}

// ListAuthors calls ListAuthorsFunc.
func (mock *QMock) ListAuthors(ctx context.Context) ([]sqlc.Author, error) {
	if mock.ListAuthorsFunc == nil {
		panic("QMock.ListAuthorsFunc: method is nil but Q.ListAuthors was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockQMockListAuthors.Lock()
	mock.calls.ListAuthors = append(mock.calls.ListAuthors, callInfo)
	lockQMockListAuthors.Unlock()
	return mock.ListAuthorsFunc(ctx)
}

// ListAuthorsCalls gets all the calls that were made to ListAuthors.
// Check the length with:
//     len(mockedQ.ListAuthorsCalls())
func (mock *QMock) ListAuthorsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockQMockListAuthors.RLock()
	calls = mock.calls.ListAuthors
	lockQMockListAuthors.RUnlock()
	return calls
}

// ListAuthorsByAgentID calls ListAuthorsByAgentIDFunc.
func (mock *QMock) ListAuthorsByAgentID(ctx context.Context, agentID int64) ([]sqlc.Author, error) {
	if mock.ListAuthorsByAgentIDFunc == nil {
		panic("QMock.ListAuthorsByAgentIDFunc: method is nil but Q.ListAuthorsByAgentID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AgentID int64
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	lockQMockListAuthorsByAgentID.Lock()
	mock.calls.ListAuthorsByAgentID = append(mock.calls.ListAuthorsByAgentID, callInfo)
	lockQMockListAuthorsByAgentID.Unlock()
	return mock.ListAuthorsByAgentIDFunc(ctx, agentID)
}

// ListAuthorsByAgentIDCalls gets all the calls that were made to ListAuthorsByAgentID.
// Check the length with:
//     len(mockedQ.ListAuthorsByAgentIDCalls())
func (mock *QMock) ListAuthorsByAgentIDCalls() []struct {
	Ctx     context.Context
	AgentID int64
} {
	var calls []struct {
		Ctx     context.Context
		AgentID int64
	}
	lockQMockListAuthorsByAgentID.RLock()
	calls = mock.calls.ListAuthorsByAgentID
	lockQMockListAuthorsByAgentID.RUnlock()
	return calls
}

// ListAuthorsByBookID calls ListAuthorsByBookIDFunc.
func (mock *QMock) ListAuthorsByBookID(ctx context.Context, bookID int64) ([]sqlc.Author, error) {
	if mock.ListAuthorsByBookIDFunc == nil {
		panic("QMock.ListAuthorsByBookIDFunc: method is nil but Q.ListAuthorsByBookID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		BookID int64
	}{
		Ctx:    ctx,
		BookID: bookID,
	}
	lockQMockListAuthorsByBookID.Lock()
	mock.calls.ListAuthorsByBookID = append(mock.calls.ListAuthorsByBookID, callInfo)
	lockQMockListAuthorsByBookID.Unlock()
	return mock.ListAuthorsByBookIDFunc(ctx, bookID)
}

// ListAuthorsByBookIDCalls gets all the calls that were made to ListAuthorsByBookID.
// Check the length with:
//     len(mockedQ.ListAuthorsByBookIDCalls())
func (mock *QMock) ListAuthorsByBookIDCalls() []struct {
	Ctx    context.Context
	BookID int64
} {
	var calls []struct {
		Ctx    context.Context
		BookID int64
	}
	lockQMockListAuthorsByBookID.RLock()
	calls = mock.calls.ListAuthorsByBookID
	lockQMockListAuthorsByBookID.RUnlock()
	return calls
}

// ListBooks calls ListBooksFunc.
func (mock *QMock) ListBooks(ctx context.Context) ([]sqlc.Book, error) {
	if mock.ListBooksFunc == nil {
		panic("QMock.ListBooksFunc: method is nil but Q.ListBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockQMockListBooks.Lock()
	mock.calls.ListBooks = append(mock.calls.ListBooks, callInfo)
	lockQMockListBooks.Unlock()
	return mock.ListBooksFunc(ctx)
}

// ListBooksCalls gets all the calls that were made to ListBooks.
// Check the length with:
//     len(mockedQ.ListBooksCalls())
func (mock *QMock) ListBooksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockQMockListBooks.RLock()
	calls = mock.calls.ListBooks
	lockQMockListBooks.RUnlock()
	return calls
}

// ListBooksByAuthorID calls ListBooksByAuthorIDFunc.
func (mock *QMock) ListBooksByAuthorID(ctx context.Context, authorID int64) ([]sqlc.Book, error) {
	if mock.ListBooksByAuthorIDFunc == nil {
		panic("QMock.ListBooksByAuthorIDFunc: method is nil but Q.ListBooksByAuthorID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		AuthorID int64
	}{
		Ctx:      ctx,
		AuthorID: authorID,
	}
	lockQMockListBooksByAuthorID.Lock()
	mock.calls.ListBooksByAuthorID = append(mock.calls.ListBooksByAuthorID, callInfo)
	lockQMockListBooksByAuthorID.Unlock()
	return mock.ListBooksByAuthorIDFunc(ctx, authorID)
}

// ListBooksByAuthorIDCalls gets all the calls that were made to ListBooksByAuthorID.
// Check the length with:
//     len(mockedQ.ListBooksByAuthorIDCalls())
func (mock *QMock) ListBooksByAuthorIDCalls() []struct {
	Ctx      context.Context
	AuthorID int64
} {
	var calls []struct {
		Ctx      context.Context
		AuthorID int64
	}
	lockQMockListBooksByAuthorID.RLock()
	calls = mock.calls.ListBooksByAuthorID
	lockQMockListBooksByAuthorID.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *QMock) UpdateAgent(ctx context.Context, args sqlc.UpdateAgentParams) (sqlc.Agent, error) {
	if mock.UpdateAgentFunc == nil {
		panic("QMock.UpdateAgentFunc: method is nil but Q.UpdateAgent was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args sqlc.UpdateAgentParams
	}{
		Ctx:  ctx,
		Args: args,
	}
	lockQMockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	lockQMockUpdateAgent.Unlock()
	return mock.UpdateAgentFunc(ctx, args)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//     len(mockedQ.UpdateAgentCalls())
func (mock *QMock) UpdateAgentCalls() []struct {
	Ctx  context.Context
	Args sqlc.UpdateAgentParams
} {
	var calls []struct {
		Ctx  context.Context
		Args sqlc.UpdateAgentParams
	}
	lockQMockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	lockQMockUpdateAgent.RUnlock()
	return calls
}

// UpdateAuthor calls UpdateAuthorFunc.
func (mock *QMock) UpdateAuthor(ctx context.Context, args sqlc.UpdateAuthorParams) (sqlc.Author, error) {
	if mock.UpdateAuthorFunc == nil {
		panic("QMock.UpdateAuthorFunc: method is nil but Q.UpdateAuthor was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args sqlc.UpdateAuthorParams
	}{
		Ctx:  ctx,
		Args: args,
	}
	lockQMockUpdateAuthor.Lock()
	mock.calls.UpdateAuthor = append(mock.calls.UpdateAuthor, callInfo)
	lockQMockUpdateAuthor.Unlock()
	return mock.UpdateAuthorFunc(ctx, args)
}

// UpdateAuthorCalls gets all the calls that were made to UpdateAuthor.
// Check the length with:
//     len(mockedQ.UpdateAuthorCalls())
func (mock *QMock) UpdateAuthorCalls() []struct {
	Ctx  context.Context
	Args sqlc.UpdateAuthorParams
} {
	var calls []struct {
		Ctx  context.Context
		Args sqlc.UpdateAuthorParams
	}
	lockQMockUpdateAuthor.RLock()
	calls = mock.calls.UpdateAuthor
	lockQMockUpdateAuthor.RUnlock()
	return calls
}
