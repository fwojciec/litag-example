// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/litag-example/generated/sqlc"
	"github.com/fwojciec/litag-example/postgres"
	"sync"
)

var (
	lockTxQuerentMockCreateBook sync.RWMutex
	lockTxQuerentMockUpdateBook sync.RWMutex
)

// Ensure, that TxQuerentMock does implement postgres.TxQuerent.
// If this is not the case, regenerate this file with moq.
var _ postgres.TxQuerent = &TxQuerentMock{}

// TxQuerentMock is a mock implementation of postgres.TxQuerent.
//
//     func TestSomethingThatUsesTxQuerent(t *testing.T) {
//
//         // make and configure a mocked postgres.TxQuerent
//         mockedTxQuerent := &TxQuerentMock{
//             CreateBookFunc: func(ctx context.Context, bookArgs sqlc.CreateBookParams, authorIDs []int64) (*sqlc.Book, error) {
// 	               panic("mock out the CreateBook method")
//             },
//             UpdateBookFunc: func(ctx context.Context, bookArgs sqlc.UpdateBookParams, authorIDs []int64) (*sqlc.Book, error) {
// 	               panic("mock out the UpdateBook method")
//             },
//         }
//
//         // use mockedTxQuerent in code that requires postgres.TxQuerent
//         // and then make assertions.
//
//     }
type TxQuerentMock struct {
	// CreateBookFunc mocks the CreateBook method.
	CreateBookFunc func(ctx context.Context, bookArgs sqlc.CreateBookParams, authorIDs []int64) (*sqlc.Book, error)

	// UpdateBookFunc mocks the UpdateBook method.
	UpdateBookFunc func(ctx context.Context, bookArgs sqlc.UpdateBookParams, authorIDs []int64) (*sqlc.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateBook holds details about calls to the CreateBook method.
		CreateBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BookArgs is the bookArgs argument value.
			BookArgs sqlc.CreateBookParams
			// AuthorIDs is the authorIDs argument value.
			AuthorIDs []int64
		}
		// UpdateBook holds details about calls to the UpdateBook method.
		UpdateBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BookArgs is the bookArgs argument value.
			BookArgs sqlc.UpdateBookParams
			// AuthorIDs is the authorIDs argument value.
			AuthorIDs []int64
		}
	}
}

// CreateBook calls CreateBookFunc.
func (mock *TxQuerentMock) CreateBook(ctx context.Context, bookArgs sqlc.CreateBookParams, authorIDs []int64) (*sqlc.Book, error) {
	if mock.CreateBookFunc == nil {
		panic("TxQuerentMock.CreateBookFunc: method is nil but TxQuerent.CreateBook was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		BookArgs  sqlc.CreateBookParams
		AuthorIDs []int64
	}{
		Ctx:       ctx,
		BookArgs:  bookArgs,
		AuthorIDs: authorIDs,
	}
	lockTxQuerentMockCreateBook.Lock()
	mock.calls.CreateBook = append(mock.calls.CreateBook, callInfo)
	lockTxQuerentMockCreateBook.Unlock()
	return mock.CreateBookFunc(ctx, bookArgs, authorIDs)
}

// CreateBookCalls gets all the calls that were made to CreateBook.
// Check the length with:
//     len(mockedTxQuerent.CreateBookCalls())
func (mock *TxQuerentMock) CreateBookCalls() []struct {
	Ctx       context.Context
	BookArgs  sqlc.CreateBookParams
	AuthorIDs []int64
} {
	var calls []struct {
		Ctx       context.Context
		BookArgs  sqlc.CreateBookParams
		AuthorIDs []int64
	}
	lockTxQuerentMockCreateBook.RLock()
	calls = mock.calls.CreateBook
	lockTxQuerentMockCreateBook.RUnlock()
	return calls
}

// UpdateBook calls UpdateBookFunc.
func (mock *TxQuerentMock) UpdateBook(ctx context.Context, bookArgs sqlc.UpdateBookParams, authorIDs []int64) (*sqlc.Book, error) {
	if mock.UpdateBookFunc == nil {
		panic("TxQuerentMock.UpdateBookFunc: method is nil but TxQuerent.UpdateBook was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		BookArgs  sqlc.UpdateBookParams
		AuthorIDs []int64
	}{
		Ctx:       ctx,
		BookArgs:  bookArgs,
		AuthorIDs: authorIDs,
	}
	lockTxQuerentMockUpdateBook.Lock()
	mock.calls.UpdateBook = append(mock.calls.UpdateBook, callInfo)
	lockTxQuerentMockUpdateBook.Unlock()
	return mock.UpdateBookFunc(ctx, bookArgs, authorIDs)
}

// UpdateBookCalls gets all the calls that were made to UpdateBook.
// Check the length with:
//     len(mockedTxQuerent.UpdateBookCalls())
func (mock *TxQuerentMock) UpdateBookCalls() []struct {
	Ctx       context.Context
	BookArgs  sqlc.UpdateBookParams
	AuthorIDs []int64
} {
	var calls []struct {
		Ctx       context.Context
		BookArgs  sqlc.UpdateBookParams
		AuthorIDs []int64
	}
	lockTxQuerentMockUpdateBook.RLock()
	calls = mock.calls.UpdateBook
	lockTxQuerentMockUpdateBook.RUnlock()
	return calls
}
